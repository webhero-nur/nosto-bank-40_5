/* 
1. What is a call stack?
2. Tell us about Try-catch.
3. Name some console APIs.
4. What is syntax error?
5. When do we get reference error?
6. a) What is wrong with the code below:
            var foo;
            console.log(foo.bar);
    b) What type of error will the code generate?
    c) What is the correct way to write the code?

*/

/* 
Answer:
1. A call stack is a mechanism for an interpreter, like the JavaScript interpreter in a web browser, to keep track of its place in a script that calls multiple functions. Here, what function is currently being run and what functions are call from within that function, etc. being stacked.

2. The try...catch statement is comprised of a try block and either a catch block, a finally block or both. The code in the try block is executed first, and if it throws an exception, the code in the catch block will be executed.

3.  console.log()   -> log something in the console tab
    console.clear() -> clear the console tab
    console.warn()  -> generate a warning message in the console tab
    console.error() -> output an error message in the console
    console.table() -> display tabular data as a table (tabular data --> array, array of object, etc.)

4. Syntax error are mistakes in the source code, such as spelling and punctuation errors, incorrect labels, and so on, which cause an error message to be generated by the compiler.

5. The ReferenceError object represents an error when a variable that doesn't exists or hasn't yet been initialized in the curent scope is referenced.

6.  a) When we initialize the variable foo, we didn't specify what type the variable will be. To avoid hoising issue, variable initialization using let or const is more preferable.
    b) TypeError: Cannot read properties of undefined
    c)  let foo = {bar: 'something'};
        console.log(foo.bar);
*/